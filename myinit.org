#+STARTUP: content
#+TITLE: My Emacs Customization
#+AUTHOR: Martin Buchmann
# Time-stamp: <2017-10-21 21:03:40 Martin>

* Allgemeines
** Mein eigener Pfad für Erweiterungen
Durch den Paketmanager muss ich kaum noch Pakete manuell installieren.
#+BEGIN_SRC emacs-lisp
    (setq load-path
          (mapcar 'expand-file-name
                  (append '("~/.emacs.d/elisp"
                            "~/.emacs.d/elisp/redshank")
                          load-path)))
#+END_SRC
** Das =Customize=-Interface
Lagert die Einstellungen über das =Customize=-Interface in eine eigene Datei
aus, anstatt =init.el= zu erweitern.
#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+END_SRC
** Sicherheit
   Einige grundlegende Einstellungen, um sicherzustellen, dass über das
   Paketmanager keine allzu großen Sicherheitslücken entstehen. Inspiriert von
   [[https://glyph.twistedmatrix.com/2015/11/editor-malware.html][Your editor is malware]]
#+BEGIN_SRC emacs-lisp
  (require 'cl)
  (setq tls-checktrust t)

  (setq python "/opt/local/bin/python")

  (let ((trustfile
	 (replace-regexp-in-string
          "\\\\" "/"
          (replace-regexp-in-string
           "\n" ""
           (shell-command-to-string (concat python " -m certifi"))))))
    (setq tls-program
          (list
           (format "gnutls-cli%s --x509cafile %s -p %%p %%h"
                   (if (eq window-system 'w32) ".exe" "") trustfile)))
    (setq gnutls-verify-error t)
    (setq gnutls-trustfiles (list trustfile)))

  ;; https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources
  (setq epa-file-cache-passphrase-for-symmetric-encryption t)
  (setq auth-sources
	      '((:source "~/.emacs.d/secrets/.authinfo.gpg")))
#+END_SRC

** Grundlegende Einstellungen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)

  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Hebt Klammern paarweise hervor
  (show-paren-mode t)
  (setq show-paren-delay 0.0)
  (setq-default indicate-empty-lines t)

  (setq visible-bell t)
  (setq ring-bell-function 'ignore)

  (setq-default fill-column 80)

  ;; auto revert mode
  (global-auto-revert-mode 1)

  ;; auto refresh dired when file changes
  (add-hook 'dired-mode-hook 'auto-revert-mode)
#+END_SRC
** Grundlegende Pakete
*** Command log mode

#+BEGIN_SRC emacs-lisp
  (use-package command-log-mode
    :ensure t)
#+END_SRC
*** beginend

#+BEGIN_SRC emacs-lisp
  (use-package beginend
    :defer t
    :config
    (beginend-global-mode))
#+END_SRC
*** alert
Ich verwende [[https://github.com/jwiegley/alert][alert]] um Benachrichtigungen anzuzeigen.  Da [[growl.info][Growl]] nicht
funktioniert, verwende ich [[https://github.com/julienXX/terminal-notifier][terminal-notifier]].

#+BEGIN_SRC emacs-lisp
  (use-package alert
    :ensure t
    :config
    (setq alert-default-style 'osx-notifier))
#+END_SRC
*** Try und which-key
#+BEGIN_SRC emacs-lisp
  (use-package try
          :defer t)

  (use-package which-key
          :defer t
          :diminish which-key-mode
          :config
          (which-key-mode))
#+END_SRC
*** pdf-tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :init
    (pdf-tools-install))
#+END_SRC
*** Farbige Lesezeichen im Buffer
#+BEGIN_SRC emacs-lisp
  ;; Make sure the repository is loaded as early as possible
  (setq bm-restore-repository-on-load t)
  (use-package bm
    :ensure t
    :bind
    (("<M-f4>" . bm-toggle)
     ("<f4>" . bm-next)
     ("<S-f4>" . bm-previous)
     ("<M-S-f4>" . bm-bookmark-annotate))
    :config
    (progn
      ;; make bookmarks persistent as default
      (setq-default bm-buffer-persistence t)
      ;; Loading the repository from file when on start up.
      (add-hook' after-init-hook 'bm-repository-load)
      ;; Restoring bookmarks when on file find.
      (add-hook 'find-file-hooks 'bm-buffer-restore)
      ;; Saving bookmark data on killing a buffer
      (add-hook 'kill-buffer-hook 'bm-buffer-save)
      ;; Saving the repository to file when on exit.
      ;; kill-buffer-hook is not called when emacs is killed, so we
      ;; must save all bookmarks first.
      (add-hook 'kill-emacs-hook '(lambda nil
                                    (bm-buffer-save-all)
                                    (bm-repository-save)))
      ;; Update bookmark repository when saving the file.
      (add-hook 'after-save-hook 'bm-buffer-save)
      ;; Restore bookmarks when buffer is reverted.
      (add-hook 'after-revert-hook 'bm-buffer-restore)
      ;; make sure bookmarks is saved before check-in (and revert-buffer)
      (add-hook 'vc-before-checkin-hook 'bm-buffer-save)))
#+END_SRC

*** counsel/ivy/swiper
#+BEGIN_SRC emacs-lisp
  ;; http://pragmaticemacs.com/emacs/counsel-yank-pop-with-a-tweak/
  (use-package counsel
    :ensure t
    :bind
    (("M-x" . counsel-M-x)
     ("M-y" . counsel-yank-pop)
     ("C-x C-f" . counsel-find-file)
     ("C-x r b" . counsel-bookmark)
     ("M-i" . counsel-imenu)
     ("C-c g" . counsel-git)
     ("C-c j" . counsel-git-grep)
     ("C-c k" . counsel-ag)
     ("C-x l" . counsel-locate)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))

  (use-package ivy
    :ensure t
    :diminish ivy-mode
    :bind
    (("C-c C-r" . ivy-resume)
     ("C-s" . swiper)
     ("C-r" . swiper)
     ("C-x b" . ivy-switch-buffer))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))

  (use-package ivy-hydra
    :defer t)
#+END_SRC
*** dired
#+BEGIN_SRC emacs-lisp
  (setq insert-directory-program "/opt/local/bin/gls")
  (setq dired-listing-switches "-aBhl --group-directories-first")
  ;;; (setq dired-dwim-target t)

  (use-package dired-quick-sort
    :defer t
    :config
    (dired-quick-sort-setup))

  (use-package dired-details
    :disabled t
    :config
    (dired-details-install))

  ;;; https://fuco1.github.io/2017-05-01-Support-for-imenu-in-dired.html
  (use-package f
    :defer t)

  (use-package dash
    :defer t)

  ;; (defun my-dired-imenu-prev-index-position (&optional arg)
  ;;   "Go to the header line of previous directory."
  ;;   (interactive "p")
  ;;   (unless (= (line-number-at-pos) 1)
  ;;     (call-interactively 'dired-prev-subdir)
  ;;     t))

  ;; (defun my-dired-extract-index-name ()
  ;;   "Extract name of the current item for imenu."
  ;;   (save-excursion
  ;;     (back-to-indentation)
  ;;     (buffer-substring-no-properties
  ;;      (point)
  ;;      (1- (re-search-forward ":$")))))

  ;; (defun my-dired-imenu-create-index ()
  ;;   "Create `imenu' index for dired."
  ;;   (let* ((alist (imenu-default-create-index-function))
  ;;          (uniquified (f-uniquify-alist (-map 'car alist))))
  ;;     (--remove
  ;;      (= 0 (length (car it)))
  ;;      (--map (cons (cdr (assoc (car it) uniquified)) (cdr it))
  ;;             alist))))

  ;; (defun my-dired-imenu-init ()
  ;;   "Initialize `imenu' variables in current buffer."
  ;;   (setq-local imenu-prev-index-position-function
  ;;               'my-dired-imenu-prev-index-position)
  ;;   (setq-local imenu-extract-index-name-function
  ;;               'my-dired-extract-index-name)
  ;;   (setq-local imenu-create-index-function
  ;;               'my-dired-imenu-create-index))

  ;; (add-hook 'dired-mode-hook 'my-dired-imenu-init)
#+END_SRC

*** multiple cursors
#+BEGIN_SRC emacs-lisp
  ;; (use-package multiple-cursors
  ;;   :disabled t
  ;;   :bind
  ;;     ("C-S-c C-S-c" . mc/edit-lines)
  ;;     ("C->" . mc/mark-next-like-this)
  ;;     ("C-<" . mc/mark-previous-like-this)
  ;;     ("C-c C-<" . mc/mark-all-like-this))
#+END_SRC
*** Auto-complete mode
#+BEGIN_SRC emacs-lisp
  (require 'auto-complete)
  (global-auto-complete-mode t)
#+END_SRC
*** readline-completion
#+BEGIN_SRC emacs-lisp
  (use-package readline-complete
    :ensure t
    :config
    (progn
     (setq explicit-shell-file-name "bash")
     (setq explicit-bash-args '("-c" "export EMACS=; stty echo; bash"))
     (setq comint-process-echoes t)
     (add-to-list 'ac-modes 'shell-mode)
     (add-hook 'shell-mode-hook 'ac-rlc-setup-sources)))
#+END_SRC
*** el-doc und smart-comment
#+BEGIN_SRC emacs-lisp
  (use-package smart-comment
    :bind ("M-;" . smart-comment))
 
  (use-package eldoc
    :diminish eldoc-mode
    :init  (setq eldoc-idle-delay 0.1))
#+END_SRC
*** macrostep
#+BEGIN_SRC emacs-lisp
  (use-package macrostep
    :config
    (define-key emacs-lisp-mode-map (kbd "C-c e") 'macrostep-expand))
#+END_SRC
*** Recent files
#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :init
    (setq recentf-max-menu-items 25
          recentf-auto-cleanup 'never
          recentf-keep '(file-remote-p file-readable-p))
    (recentf-mode 1)
    :bind ("C-c f f" . recentf-open-files))
#+END_SRC
*** Hide/Show
#+BEGIN_SRC emacs-lisp
  (defun ha/hs-show-all ()
    (interactive)
    (hs-minor-mode 1)
    (hs-show-all))
 
  (defun ha/hs-hide-all ()
    (interactive)
    (hs-minor-mode 1)
    (hs-hide-all))
 
  (defun ha/hs-toggle-hiding ()
    (interactive)
    (hs-minor-mode 1)
    (hs-toggle-hiding))

  (use-package hs-minor-mode
    :bind
    ("C-c T h" . hs-minor-mode)
    ("C-c h a" . ha/hs-hide-all)
    ("C-c h s" . ha/hs-show-all)
    ("C-c h h" . ha/hs-toggle-hiding))
#+END_SRC

*** mu4e
Ich wusste, daß es irgendwann passieren wird...

[[http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/#getting-set-up-with-mu-and-offlineimap][Diese]] Anleitung hat es mir sehr einfach gemacht. Ich habe alle nötigen Programme
mittels macports installieren können (mu +emacs!).  Um mein Passwort nicht im
Klartext speichern zu müssen, habe ich diesen [[http://quotenil.com/OfflineIMAP-with-Encrypted-Authinfo.html][Trick]] angewandt. 
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "/opt/local/share/emacs/site-lisp/mu4e/")

  (require 'mu4e)
  ;; (setq send-mail-function 'smtpmail-send-it)
  (setq mail-user-agent 'mu4e-user-agent)

  (require 'mu4e-maildirs-extension)
  (mu4e-maildirs-extension)

  (setq mu4e-contexts
        `( ,(make-mu4e-context
	     :name "Gmail"
	     :match-func (lambda (msg) (when msg
				         (string-prefix-p
					  "/Gmail" (mu4e-message-field msg :maildir))))
	     :vars '(
		     (mu4e-trash-folder . "/Gmail/[Google Mail].Papierkorb")
		     (mu4e-refile-folder . "/Gmail/[Google Mail].Alle Nachrichten")))))

  (use-package mu4e-alert
    :ensure t
    :after mu4e
    :init
    (setq mu4e-alert-interesting-mail-query
      (concat
       "flag:unread maildir:/Gmail/INBOX"
       ))
    (mu4e-alert-enable-mode-line-display)
    (defun gjstein-refresh-mu4e-alert-mode-line ()
      (interactive)
      (mu4e~proc-kill)
      (mu4e-alert-enable-mode-line-display)
      )
    (run-with-timer 0 60 'gjstein-refresh-mu4e-alert-mode-line))

  ;; I have my "default" parameters from Gmail
  ;; (setq mu4e-sent-folder "/Users/Martin/Maildir/Gmail/[Google Mail].Gesendet"
  ;;       ;; mu4e-sent-messages-behavior 'delete ;; Unsure how this should be configured
  ;;       mu4e-drafts-folder "/Users/Martin/Maildir/Drafts"
  ;;       user-mail-address "Martin.Buchmann@googlemail.com"
  ;;       smtpmail-default-smtp-server "smtp.googlemail.com"
  ;;       smtpmail-smtp-server "smtp.googlemail.com"
  ;;       smtpmail-smtp-service 587)

  ;; Now I set a list of 
  (defvar my-mu4e-account-alist
    '(("Gmail"
       (mu4e-sent-folder "/Gmail/[Google Mail].Gesendet")
       (mu4e-drafts-folder "/Gmail/Drafts")
       (user-mail-address "Martin.Buchmann@googlemail.com")
       (smtpmail-smtp-user "Martin.Buchmann")
       (smtpmail-local-domain "googlemail.com")
       (smtpmail-default-smtp-server "smtp.googlemail.com")
       (smtpmail-smtp-server "smtp.googlemail.com")
       (smtpmail-smtp-service 587)
       )
       ;; Include any other accounts here ...
      ))

  (defun my-mu4e-set-account ()
    "Set the account for composing a message.
     This function is taken from: 
       https://www.djcbsoftware.nl/code/mu/mu4e/Multiple-accounts.html"
    (let* ((account
      (if mu4e-compose-parent-message
          (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
      (string-match "/\\(.*?\\)/" maildir)
      (match-string 1 maildir))
        (completing-read (format "Compose with account: (%s) "
               (mapconcat #'(lambda (var) (car var))
              my-mu4e-account-alist "/"))
             (mapcar #'(lambda (var) (car var)) my-mu4e-account-alist)
             nil t nil nil (caar my-mu4e-account-alist))))
     (account-vars (cdr (assoc account my-mu4e-account-alist))))
      (if account-vars
    (mapc #'(lambda (var)
        (set (car var) (cadr var)))
          account-vars)
        (error "No email account found"))))
  (add-hook 'mu4e-compose-pre-hook 'my-mu4e-set-account)

  (defun remove-nth-element (nth list)
    (if (zerop nth) (cdr list)
      (let ((last (nthcdr (1- nth) list)))
        (setcdr last (cddr last))
        list)))
  (setq mu4e-marks (remove-nth-element 5 mu4e-marks))
  (add-to-list 'mu4e-marks
       '(trash
         :char ("d" . "▼")
         :prompt "dtrash"
         :dyn-target (lambda (target msg) (mu4e-get-trash-folder msg))
         :action (lambda (docid msg target) 
                   (mu4e~proc-move docid
                      (mu4e~mark-check-target target) "-N"))))

  ;; Include a bookmark to open all of my inboxes
  ;; (add-to-list 'mu4e-bookmarks
  ;;        (make-mu4e-bookmark
  ;;         :name "All Inboxes"
  ;;         :query "maildir:/Gmail/INBOX"
  ;;         :key ?i))

  ;; This allows me to use 'helm' to select mailboxes
  (setq mu4e-completing-read-function 'completing-read)
  ;; Why would I want to leave my message open after I've sent it?
  (setq message-kill-buffer-on-exit t)
  ;; Don't ask for a 'context' upon opening mu4e
  (setq mu4e-context-policy 'pick-first)
  ;; Don't ask to quit... why is this the default?
  (setq mu4e-confirm-quit nil)
#+END_SRC
*** org-mode
Ich habe viele Tipps zu [[http://orgmode.org][Org-mode]] bei [[https://github.com/zamansky/using-emacs/tree/lesson-2-org][Mike]] gefunden.  Die Feineinstellungen und
viele Tricks sind von [[https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE][Rainer]].

**** Allgemeine Konfiguration von org-mode

#+BEGIN_SRC emacs-lisp
  ;; Allgemeine Tastenbelegung
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-iswitchb)

  ;; Allgemeine Einstellungen
  (setq org-directory "~/Dropbox/orgfiles")
  (setq org-default-notes-file (concat org-directory "/Notes.org"))

  (setq org-agenda-files (list "~/Dropbox/orgfiles/Martin.org"
                               "~/Dropbox/orgfiles/Notes.org"
                               "~/Dropbox/orgfiles/GCal.org"
                               "~/Dropbox/orgfiles/Wunderlist.org"))

  (setq org-refile-targets '((org-agenda-files :level . 1)))
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  (setq org-refile-use-outline-path 'file)

  (setq org-export-html-postamble nil)
  (setq org-startup-folded (quote overview))
  (setq org-startup-indented t)
  (setq org-src-tab-acts-natively t)
  (setq org-src-window-setup 'current-window)

  (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
  (setq org-mobile-inbox-for-pull "~/Dropbox/orgfiles/flagged.org")

  ;; Meine eigenen Agenda-Ansichten
  (setq org-agenda-custom-commands
          '(("h" "Was liegt heute an?"
             ((tags-todo "Dringend"
                         ((org-agenda-overriding-header "Dringende Aufgaben")
                          (org-agenda-files
                           '("~/Dropbox/orgfiles/Martin.org" "~/Dropbox/orgfiles/Notes.org"))))
              (tags-todo "Anrufe"
                         ((org-agenda-overriding-header "Anrufe")
                          (org-agenda-files
                           '("~/Dropbox/orgfiles/Martin.org" "~/Dropbox/orgfiles/Notes.org"))))
              (agenda  ""
                         ((org-agenda-overriding-header "Heute")
                          (org-agenda-files
                           '("~/Dropbox/orgfiles/Martin.org" "~/Dropbox/orgfiles/Notes.org"))
                           (org-agenda-span 1)
                           (org-agenda-sorting-stragety '(time-up priority-down))))))
            ("c" "Einfache Agenda"
             ((agenda "")
              (alltodo "")))))

  (setq org-show-notification-handler 'alert)

  (setq org-highlight-latex-and-related '(latex))

  ;; http://orgmode.org/worg/org-faq.html
  (defun diary-limited-cyclic (recurrences interval m d y)
    "For use in emacs diary. Cyclic item with limited number of recurrences.
  Occurs every INTERVAL days, starting on YYYY-MM-DD, for a total of
  RECURRENCES occasions."
    (let ((startdate (calendar-absolute-from-gregorian (list m d y)))
          (today (calendar-absolute-from-gregorian date)))
      (and (not (minusp (- today startdate)))
           (zerop (% (- today startdate) interval))
           (< (floor (- today startdate) interval) recurrences))))

  (with-eval-after-load "ox-latex"
    (add-to-list 'org-latex-classes
                 '("koma-article" "\\documentclass{scrartcl}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

#+END_SRC

***** Farbiges Syntax-Highlighting beim Exportieren
#+BEGIN_SRC emacs-lisp
(use-package htmlize
  :ensure t)

(use-package mic-paren
  :ensure t)
#+END_SRC
***** Zusätzliche TODO-Keywords und Tags
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
	'((sequence "TODO(t@/!)" "Nächstes(n)" "Warten(w@/!)" "Projekt(p)" "Irgendwann(i)"
		    "|" "DONE(d@/!)" "Gestoppt(g/!)")))

  (setq org-tag-alist '(("@Arbeit" . ?a) ("@Zuhause" . ?z)
			("Hobby" . ?h) ("Reichardtstieg" . ?r) ("Anrufe" . ?A) ("Dringend" . ?d)))

  (setq org-enforce-todo-dependencies t)
  (setq org-enforce-checkbox-dependencies t)
  (setq org-track-ordered-property-with-tag t)
#+END_SRC

***** Einstellungen für das Loggen und die Archivierung
#+BEGIN_SRC emacs-lisp
  (setq org-log-reschedule 'note)  
  (setq org-log-into-drawer t)
  (setq org-archive-location    "~/Dropbox/orgfiles/archive.org::* From %s")
#+END_SRC 
**** org-babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((lisp . t)
     (emacs-lisp . t)))
#+END_SRC
**** org-bullets
     Displaying nice bullets instead of just the asterics
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

**** org-autocomplete
#+BEGIN_SRC emacs-lisp
  (use-package org-ac
    :ensure t
    :init (progn
            (require 'org-ac)
            (org-ac/config-default)))
#+END_SRC

**** org-capture
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(("l" "Link" entry (file+headline "~/Dropbox/orgfiles/Links.org" "Links")
           "* %? %^L %^g \n%T" :prepend t)
          ("a" "Aufgabe" entry (file+headline "~/Dropbox/orgfiles/Martin.org" "Aufgaben")
           "* TODO %?\n%u" :prepend t)
          ("u" "Aufgabe mit Deadline" entry (file+headline "~/Dropbox/orgfiles/Martin.org" "Aufgaben")
            "* TODO [#A] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n" :prepend t)
          ("e" "Emacs-Aufgabe" entry (file+headline "~/Dropbox/orgfiles/Martin.org" "Emacs")
           "* TODO %?\n%u" :prepend t)
          ("c" "Common Lisp" entry (file+headline "~/Dropbox/orgfiles/Martin.org"
                                                  "Common Lisp-Projekte")
           "* TODO %?\n%u" :prepend t)
          ("m" "Mail To Do" entry (file+headline "~/Dropbox/orgfiles/Martin.org" "To Do")
           "* TODO %a\n %?" :prepend t)
          ("n" "Notiz" entry (file+headline "~/Dropbox/orgfiles/Notes.org" "Notizen")
           "* %?\n%u" :prepend t)
          ("T" "Termin" entry (file  "~/Dropbox/orgfiles/GCal.org")
           "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
          ("t" "Tagebucheintrag" entry (file+datetree "~/Dropbox/orgfiles/Journal.org.gpg")
           "* %?\nEntered on %U\n  %i\n  %a")
	  ("b" "Buch" entry (file+headline "~/Dropbox/orgfiles/Bücher.org" "Bücher")
	   "** Irgendwann %^{Autor} -- %^{Titel}\n:PROPERTIES:\n:SEITEN: %^{Seiten}\n:GENRE: %^{Genre}\n:Rating:\n:END:\n - Empfohlen von: %^{Empfohlen von:} \n:LOGBOOK:\n - Added: %U\n:END:\n"
	   :prepend t)
	  ("f" "Film" entry (file+headline "~/Dropbox/orgfiles/Filme.org" "Filme")
	   "** Irgendwann %^{Titel}\n:PROPERTIES:\n:GENRE: %^{Genre}\n:END:\n- Empfohlen von: %^{Empfohlen von:}\n:LOGBOOK:\n - Added: %U\n:END:\n")))

    ;; Capturing from outside of a runnign emacs
    ;; http://cestlaz.github.io/posts/using-emacs-24-capture-2/#.WJzewBiX-V4
    (defadvice org-capture-finalize
        (after delete-capture-frame activate)
      "Advise capture-finalize to close the frame"
      (if (equal "capture" (frame-parameter nil 'name))
        (delete-frame)))

    (defadvice org-capture-destroy
        (after delete-capture-frame activate)
      "Advise capture-destroy to close the frame"
      (if (equal "capture" (frame-parameter nil 'name))
        (delete-frame)))

    (use-package noflet
      :ensure t)

    (defun make-capture-frame ()
      "Create a new frame and run org-capture."
      (interactive)
      (make-frame '((name . "capture")))
      (select-frame-by-name "capture")
      (delete-other-windows)
      (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
              (org-capture)))
#+END_SRC

**** org-gcal
Ich brauche das eigentlich nicht. Es gibt auch noch zahlreiche Fehler, z.B. mit
dem Kodieren von Sonderzeichen(!), s. [[https://github.com/myuhe/org-gcal.el/issues][Issues]]. Deshalb setze ich es erst einmal aus...
#+BEGIN_SRC emacs-lisp
  (use-package org-gcal
    :disabled t
    :config
    (progn
      (setq org-gcal-file-alist '(("Martin.Buchmann@gmail.com" . 
                                   "~/Dropbox/orgfiles/GCal.org")))
      (load (expand-file-name "~/.emacs.d/secrets/org-gcal.el.gpg") t))
    :bind
    (("C-c C-g" . org-gcal-fetch)))

  ;; (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync)))
  ;; (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync)))
#+END_SRC

**** org-wunderlist
Funktioniert bestens, ich hatte nur die Konfiguration aus der falschen Datei geladen.
[[https://github.com/myuhe/org-wunderlist.el][org-wunderlist]]
#+BEGIN_SRC emacs-lisp
  (use-package org-wunderlist
    :defer t
    :config
    (progn
      (load (expand-file-name "~/.emacs.d/secrets/org.el.gpg") t)
      (setq org-wunderlist-file  "~/Dropbox/orgfiles/Wunderlist.org"
           org-wunderlist-dir "~/Dropbox/orgfiles/wunderlist/")))
#+END_SRC

**** org-mu4e
#+BEGIN_SRC emacs-lisp
;; http://pragmaticemacs.com/emacs/master-your-inbox-with-mu4e-and-org-mode/
;; store org-mode links to messages
(require 'org-mu4e)
;; store link to message if in header view, not to header query
(setq org-mu4e-link-query-in-headers-mode nil)
#+END_SRC
*** Magit, gist
#+BEGIN_SRC emacs-lisp
  (global-magit-file-mode t)
  (global-set-key (kbd "C-x g") 'magit-status)
  (setq magit-log-arguments (quote ("--graph" "--color" "--decorate" "-n256")))

  (use-package gist
    :defer t)
#+END_SRC

*** Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :defer t
    :bind
    (("C-:" . avy-goto-char)))
#+END_SRC

*** projectile
[[http://projectile.readthedocs.io/en/latest/][Dokumentation]] für projectile und die Erweiterungen für [[https://github.com/ericdanan/counsel-projectile][Counsel]].  Vielleicht
probiere ich später [[https://github.com/IvanMalison/org-projectile][org-projectile]] aus.  Aktuelle verwende ich es nicht, lasse
es aber hier stehen.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :disabled t
    :init
    (projectile-mode))

  (use-package counsel-projectile
    :disabled t
    :init
    (counsel-projectile-on))
#+END_SRC

*** GNUs
#+BEGIN_SRC emacs-lisp
  (setq gnus-init-file "~/.emacs.d/gnus.el")
#+END_SRC


* Einstellungen
** Umgebungsvariablen, Mac-Spezifika, etc
   Zurück zur Standardtastenbelegung
#+BEGIN_SRC emacs-lisp
  ;; Startet einen Server, um sich mit emacsclient verbinden zu können.
  (when window-system
    (server-start))

  ;; https://github.com/purcell/exec-path-from-shell
  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize))

  (setq
   ns-command-modifier 'meta         ; Apple/Command key is Meta
   ns-alternate-modifier nil         ; Option is the Mac Option key
   ns-use-mac-modifier-symbols  nil  ; display standard Emacs (and not standard Mac) modifier symbols)
   )

  (setq locate-command "mdfind")  ;; Use Mac OS X's Spotlight
  (global-set-key (kbd "C-c f l") 'locate)

  ;; exchanging clipboard content with other applications
  (setq select-enable-clipboard t)

  (setq
   initial-major-mode 'emacs-lisp-mode    ; *scratch* shows up in emacs-lisp-mode
   )

  (setq cursor-type (quote (box)))        ; box cursor
  (put 'downcase-region 'disabled nil)    ; Erlaubt up/downcase Befehle
  (put 'upcase-region 'disabled nil)
  (put 'scroll-left 'disabled nil)        ; Erlaubt horizontales Scrollen
  (put 'narrow-to-region 'disabled nil)   ; Erlaubt narrow/wide

  (setq delete-by-moving-to-trash t
        trash-directory "~/.Trash/emacs")

  (setq shell-file-name           "bash")
  (setq sh-shell-file             "/bin/bash")
  (setq tex-shell-file-name       "bash")

  (setq user-full-name "Martin Buchmann")
  (setq user-login-name "Martin")
  (setq user-mail-address "Martin.Buchmann@gmail.com")
  (setq smtpmail-smtp-user "Martin.Buchmann")

  (setq calendar-latitude 50.9271)
  (setq calendar-longitude 11.5892)
  (setq calendar-location-name "Jena, Germany")

  (setq calendar-time-zone +60)
  (setq calendar-standard-time-zone-name "CET")
  (setq calendar-daylight-time-zone-name "CEST")

  (setq bookmark-default-file (expand-file-name "~/.emacs.d/emacs.bmk"))

  ;; https://github.com/chrisbarrett/osx-bbdb
  (when (equal system-type 'darwin)
    (require 'osx-bbdb))
#+END_SRC

** Erscheinung

*** Windows und Frames
#+BEGIN_SRC emacs-lisp
  (when window-system
    ;; I like it this way.
    (set-frame-size (selected-frame) 220 70)
    (set-frame-position (selected-frame) 165 35)
    (set-default-font
       "-*-Source Code Pro-normal-normal-normal-*-12-*-*-*-m-0-iso10646-1")

    (global-prettify-symbols-mode)
    (global-hl-line-mode t)

    (add-hook 'prog-mode-hook 'linum-mode)
    (setq linum-format " %4i ")

    ;; Wenn Text ausgewählt ist, lösche diese bei der nächsten Eingabe.
    (delete-selection-mode t)

    (global-font-lock-mode t)

    (setq ns-pop-up-frames nil)

    (use-package mode-icons
         :ensure t 
         :config
         (mode-icons-mode t))

    (use-package beacon
      :ensure t
      :config
      (progn 
        (beacon-mode 1)
        (setq beacon-push-mark 35)
        (setq beacon-color "#666600")))

    (use-package powerline
      :ensure t
      :config
      (powerline-default-theme)))

  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

  (winner-mode)
  ;; Momentan brauche ich das nicht. Entweder läuft Emacs noch oder ich möchte
  ;; komplett neustarten.
  (desktop-save-mode -1)

  (setq pop-up-frame-function (lambda () (split-window-right)))
  (setq split-height-threshold 1400)
  (setq split-width-treshold 1500)
#+END_SRC

*** ibuffer
#+BEGIN_SRC emacs-lisp
  (defalias 'list-buffers 'ibuffer-other-window)
  ;; (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("org" (name . "^.*org$"))
                 ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
                 ("mu4e" (name . "\*mu4e\*"))
                 ("lisp" (or
                          (mode . lisp-mode)
                          (mode . emacs-lisp)
                          (mode . REPL)))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))
                 ))))

  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))

  ;; don't show these
  ;; (add-to-list 'ibuffer-never-show-predicates "zowie")
  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)

  ;; Don't ask for confirmation to delete marked buffers
  (setq ibuffer-expert t)

#+END_SRC

*** Editing
#+BEGIN_SRC emacs-lisp
  ;; Ich arbeite in einer deutschen Umgebung
  (set-language-environment       'German)

  ;; UTF-8
  (set-buffer-file-coding-system  'utf-8-unix)
  (prefer-coding-system           'utf-8-unix)
  (set-default buffer-file-coding-system  'utf-8-unix)
  (set-terminal-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)

  (setq-default indent-tabs-mode nil)

  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
  ;; Making flyspell wprk with my trackpad
  (eval-after-load "flyspell"
    '(progn
       (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
       (define-key flyspell-mouse-map [mosue-3] #'undefined)))
  (add-hook 'text-mode-hook 'turn-on-auto-fill)

  ;; Completion words longer than 4 characters
  (custom-set-variables
   '(ac-ispell-requires 4)
   '(ac-ispell-fuzzy-limit 4))

  (eval-after-load "auto-complete"
    '(progn
       (ac-ispell-setup)))

  (add-hook 'git-commit-mode-hook 'ac-ispell-ac-setup)
  (add-hook 'mail-mode-hook 'ac-ispell-ac-setup)

  (add-hook 'before-save-hook 'time-stamp) ; Aktiviert die Time-stamp-Funktion

  ;; zap-up-up-char
  (autoload 'zap-up-to-char "misc"
      "Kill up to, but not including ARGth occurrence of CHAR.

    \(fn arg char)"
      'interactive)

  (global-set-key "\M-z" 'zap-up-to-char)
  (global-set-key "\M-Z" 'zap-up-char)

  ; expand the marked region in semantic increments (negative prefix to reduce region)
  (use-package expand-region
    :ensure ;TODO:
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))

  ;;; http://pragmaticemacs.com/emacs/adaptive-cursor-width/
  (setq x-stretch-cursor t)
#+END_SRC

*** Undo-Tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :diminish undo-tree
    :init
    (global-undo-tree-mode)
    :config
    (with-eval-after-load 'undo-tree
      (define-key undo-tree-map (kbd "<S-wheel-down>") 'undo-tree-redo)
      (define-key undo-tree-map (kbd "<S-wheel-up>") 'undo-tree-undo)))
#+END_SRC
** Abkürzungen einschalten
#+BEGIN_SRC emacs-lisp
  (setq-default abbrev-mode t)
  (diminish 'abbrev-mode)
  (setq save-abbrevs t)
  (setq abbrev-file-name "~/.emacs.d/abbrev_defs")
  ;; Datei mit Abkürzungen laden
  (read-abbrev-file "~/.emacs.d/abbrev_defs")
#+END_SRC

** Wo sollen Dateien-Backup gespeichert werden?
#+BEGIN_SRC emacs-lisp
  (defconst use-backup-dir t)             ; use backup directory
  (setq make-backup-files t)
  (setq backup-directory-alist (quote ((".*" . "~/.emacs.d/backups"))))
#+END_SRC

** Eigene Funktionen
#+BEGIN_SRC emacs-lisp
  ;; https://www.emacswiki.org/emacs/InsertFileName
  (defun my-insert-file-name (filename &optional args)
      "Insert name of file FILENAME into buffer after point.
  
    Prefixed with \\[universal-argument], expand the file name to
    its fully canocalized path.  See `expand-file-name'.
  
    Prefixed with \\[negative-argument], use relative path to file
    name from current directory, `default-directory'.  See
    `file-relative-name'.
  
    The default with no prefix is to insert the file name exactly as
    it appears in the minibuffer prompt."
      ;; Based on insert-file in Emacs -- ashawley 20080926
      (interactive "*fInsert file name: \nP")
      (cond ((eq '- args)
             (insert (file-relative-name filename)))
            ((not (null args))
             (insert (expand-file-name filename)))
            (t
             (insert filename))))
#+END_SRC


* Spezielle Modi

** YASnippet
[[http://joaotavora.github.io/yasnippet/][Yet another snippet extension]]
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (progn
      (yas-global-mode 1)
      (unless (boundp 'warning-suppress-types)
        (setq warning-suppress-types nil))
      (add-to-list 'warning-suppress-types '(yasnippet backquote-change))))
#+END_SRC

** Slime, quicklisp, paredit
   http://common-lisp.net/project/slime/
   http://www.emacswiki.org/emacs/ParEdit
#+BEGIN_SRC emacs-lisp
  (load (expand-file-name "~/quicklisp/slime-helper.el"))

  (use-package paredit
    :ensure t
    :config
    (progn
      (autoload 'paredit-mode "paredit"
        "Minor mode for pseudo-structurally editing Lisp code." t)
      (add-hook 'slime-mode-hook 'enable-paredit-mode)
      (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
      (add-hook 'slime-repl-mode-hook 'enable-paredit-mode)))

  ;; remove XLS-mode and allow "file.lsp" to start lisp-mode
  ;; (setq auto-mode-alist (rassq-delete-all 'XLS-mode auto-mode-alist))

  ;; Stop SLIME's REPL from grabbing DEL,
  ;; which is annoying when backspacing over a '('
  (defun override-slime-repl-bindings-with-paredit ()
    (define-key slime-repl-mode-map
      (read-kbd-macro paredit-backward-delete-key) nil))

  (add-hook 'slime-repl-mode-hook 'override-slime-repl-bindings-with-paredit)

  (setq slime-lisp-implementations
        '((sbcl  ("/opt/local/bin/sbcl" "--no-inform --no-linedit"))
          (clisp ("/opt/local/bin/clisp"))
          (ccl   ("/opt/local/bin/ccl64 -K utf8"))))

  (setq slime-net-coding-system 'utf-8-unix)
  (slime-setup '(slime-fancy slime-banner slime-indentation slime-asdf slime-tramp))

  (define-key slime-mode-map (kbd "C-c s") 'slime-selector)
  (define-key slime-repl-mode-map (kbd "C-c s") 'slime-selector)
  (define-key slime-mode-map [(return)] 'paredit-newline)

  (require 'mic-paren)
  (paren-activate)
  (setf paren-priority 'close)

  ;; ac-slime
  (use-package ac-slime
    :ensure t
    :config
    (progn
      (add-hook 'slime-mode-hook 'set-up-slime-ac)
      (add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
      (eval-after-load "auto-complete"
        '(add-to-list 'ac-modes 'slime-repl-mode))))

  ;; emacs-lisp-nav
  (use-package elisp-slime-nav
             :ensure t
             :config
             (add-hook 'emacs-lisp-mode-hook #'elisp-slime-nav-mode))

  (add-hook 'slime-mode-hook
          (lambda ()
            (unless (slime-connected-p)
              (save-excursion (slime)))))

  ;; Hyperspec within Emacs
  (setq browse-url-browser-function
        '((".*lispworks.*" . w3m-goto-url-new-session) ("." . browse-url-default-browser)))

  (load (expand-file-name
         "~/quicklisp/dists/quicklisp/software/cl-annot-20150608-git/misc/slime-annot.el"))
  (require 'slime-annot)
#+END_SRC

** AucTeX
Ich verwende LaTeX immer noch für Briefe, Bewerbung usw. und habe durch [[https://piotrkazmierczak.com/2010/emacs-as-the-ultimate-latex-editor/][Piotrs]]
Artikel Lust bekommen mal zu schauen, ob alles zu meiner Zufriedenheit
konfiguriert ist.
#+BEGIN_SRC emacs-lisp
  ;; AucTeX wurde über den Paketmanager installiert.  Hier gibt es nur noch ein
  ;; paar zusätzliche Konfigurationen.
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-buffer)

  (require 'auto-complete-auctex)

  (add-hook 'LaTeX-mode-hook 'turn-on-outline-minor-mode)
  (add-hook 'LaTeX-mode-hook 'tex-fold-mode)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)

  (setq TeX-auto-save t
        TeX-parse-self t
        TeX-save-query nil)

  (use-package lorem-ipsum
    :ensure t)

  ;; (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
  ;;       TeX-source-correlate-start-server t)
  ;; (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
#+END_SRC

** web-mode
Auch wenn ich nicht viel HTML-Dokumente bearbeite, möchte ich [[http://web-mode.org][web mode]] nutzen.
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :disabled t
    :config
    (progn
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      (setq web-mode-ac-sources-alist
            '(("css" . (ac-source-css-property))
              ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
      (setq web-mode-enable-auto-closing t)
      (setq web-mode-enable-auto-quoting t)
      (setq web-mode-enable-css-colorization t)
      (rainbow-mode 1)))

#+END_SRC

*** lass-mode
#+BEGIN_SRC emacs-lisp
  ;; Der Pfad muss angepasst werden, bei einem Update von lass
  (add-to-list 'load-path "~/quicklisp/dists/quicklisp/software/lass-20170830-git")
  (require 'lass)
#+END_SRC
* Tastenbelegungen
#+BEGIN_SRC emacs-lisp
  (global-set-key [f5] 'revert-buffer)

  (global-set-key (kbd "C-x k") 'kill-this-buffer)

  (global-set-key (kbd "C-c j") 'flyspell-check-previous-highlighted-word)

  (global-set-key (kbd "\C-c\C-f") 'find-file-at-point)

  (global-set-key (kbd "\C-c i") 'my-insert-file-name)
#+END_SRC

* Ende
#+BEGIN_SRC emacs-lisp
  (message "Martins myinit.org wurde gelesen.")
  (alert "Emacs ist gestartet..." :title "Emacs says:" :severity 'highest :persistent t)
#+END_SRC

#  LocalWords:  utf German hook trackpad mode Frames capture org swiper babel
#  LocalWords:  projectile Keywords wunderlist Avy Try gcal YASnippet quicklisp
#  LocalWords:  complete Templates Workflow paredit Editing Undo el doc comment
#  LocalWords:  Recent files Hide AucTeX ivy GNUs macrostep Magit mu web Slime
#  LocalWords:  gist dired
